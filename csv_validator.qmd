---
title: "CSV Validator"
execute:
  echo: false
---


<style>
  body {
    font-family: Arial, sans-serif;
    /* margin: 20px; */
  }

  textarea {
    width: 60%;
    height: 150px;
    margin-top: 10px;
  }

  button {
    margin-top: 10px;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
  }

  button:hover {
    background-color: #0056b3;
  }
</style>
<div class="container">

  <p>Upload a CSV file</p>
  <input type="file" id="csvFileInput" accept=".csv">

  <p>Or Paste CSV Content</p>
  <textarea id="csvTextarea" placeholder="Paste CSV content here..."></textarea>
  <br>

  <button id="validateButton">Validate CSV</button>

  <div class="output" id="output"></div>
</div>


<!-- PapaParse Library for CSV Validation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>

<script>

  const FIELDS = {
    BROKER_FIRST_NAME: 'broker.first_name',
    BROKER_MIDDLE_NAME: 'broker.middle_name',
    BROKER_LAST_NAME: 'broker.last_name',
    BROKER_PREFIX: 'broker.prefix',
    BROKER_SUFFIX: 'broker.suffix',
    BROKER_PHONE_NUMBER: 'broker.phone_number',
    BROKER_EMAIL: 'broker.email',
    BROKER_NPN: 'broker.npn',
    SERVICING_AGENT_FIRST_NAME: 'servicing_agent.first_name',
    SERVICING_AGENT_MIDDLE_NAME: 'servicing_agent.middle_name',
    SERVICING_AGENT_LAST_NAME: 'servicing_agent.last_name',
    SERVICING_AGENT_PREFIX: 'servicing_agent.prefix',
    SERVICING_AGENT_SUFFIX: 'servicing_agent.suffix',
    SERVICING_AGENT_PHONE_NUMBER: 'servicing_agent.phone_number',
    SERVICING_AGENT_EMAIL: 'servicing_agent.email',
    SERVICING_AGENT_NPN: 'servicing_agent.npn',
    PLAN_YEAR: 'plan.year',
    PLAN_HIOS_ID: 'plan.hios_id',
    PLAN_MONTHLY_PREMIUM: 'plan.monthly_premium',
    PAYMENT_ROUTING_NUMBER: 'payment.routing_number',
    PAYMENT_ACCOUNT_NUMBER: 'payment.account_number',
    PAYMENT_PAYER_NAME: 'payment.payer_name',
    PAYMENT_ACCOUNT_TYPE: 'payment.account_type',
    PAYMENT_IS_NEW_PAYMENT_INSTRUMENT: 'payment.is_new_payment_instrument',
    ENROLLMENT_RENEWAL_TYPE: 'enrollment.renewal_type',
    ENROLLMENT_EXTERNAL_POLICY_ID: 'enrollment.external_policy_id',
    ENROLLMENT_EXTERNAL_SUBSCRIBER_ID: 'enrollment.external_subscriber_id',
    ENROLLMENT_CANCEL_OVERLAPPING_ELIGIBILITY: 'enrollment.cancel_overlapping_eligibility',
    ENROLLMENT_DATE_SIGNED: 'enrollment.date_signed',
    ENROLLMENT_QUALIFYING_EVENT: 'enrollment.qualifying_event',
    ENROLLMENT_QUALIFYING_EVENT_DATE: 'enrollment.qualifying_event_date',
    ENROLLMENT_APPLICATION_ID: 'enrollment.application_id',
    EMPLOYER_EMPLOYER_NAME: 'employer.employer_name',
    EMPLOYER_EMPLOYER_TIN: 'employer.employer_tin',
    ENROLLEE_EXTERNAL_MEMBER_ID: 'enrollee.external_member_id',
    ENROLLEE_ISSUER_MEMBER_ID: 'enrollee.issuer_member_id',
    ENROLLEE_FIRST_NAME: 'enrollee.first_name',
    ENROLLEE_MIDDLE_NAME: 'enrollee.middle_name',
    ENROLLEE_LAST_NAME: 'enrollee.last_name',
    ENROLLEE_PREFIX: 'enrollee.prefix',
    ENROLLEE_SUFFIX: 'enrollee.suffix',
    ENROLLEE_PHONE: 'enrollee.phone',
    ENROLLEE_EMAIL: 'enrollee.email',
    ENROLLEE_SSN: 'enrollee.ssn',
    ENROLLEE_MARITAL_STATUS: 'enrollee.marital_status',
    ENROLLEE_SEX: 'enrollee.sex',
    ENROLLEE_DATE_OF_BIRTH: 'enrollee.date_of_birth',
    ENROLLEE_ETHNICITY: 'enrollee.ethnicity',
    ENROLLEE_IS_TOBACCO_USER: 'enrollee.is_tobacco_user',
    ENROLLEE_RELATIONSHIP_TO_POLICY_HOLDER: 'enrollee.relationship_to_policy_holder',
    ENROLLEE_IS_REQUESTING_COVERAGE: 'enrollee.is_requesting_coverage',
    ENROLLEE_COVERAGE_START_DATE: 'enrollee.coverage_start_date',
    ENROLLEE_COVERAGE_END_DATE: 'enrollee.coverage_end_date',
    ENROLLEE_LANGUAGE_PREFERENCE: 'enrollee.language_preference',
    ENROLLEE_MAILING_ADDRESS_ADDRESS_LINE_1: 'enrollee.mailing_address.address_line_1',
    ENROLLEE_MAILING_ADDRESS_ADDRESS_LINE_2: 'enrollee.mailing_address.address_line_2',
    ENROLLEE_MAILING_ADDRESS_CITY: 'enrollee.mailing_address.city',
    ENROLLEE_MAILING_ADDRESS_STATE: 'enrollee.mailing_address.state',
    ENROLLEE_MAILING_ADDRESS_ZIPCODE: 'enrollee.mailing_address.zipcode',
    ENROLLEE_RESIDENTIAL_ADDRESS_ADDRESS_LINE_1: 'enrollee.residential_address.address_line_1',
    ENROLLEE_RESIDENTIAL_ADDRESS_ADDRESS_LINE_2: 'enrollee.residential_address.address_line_2',
    ENROLLEE_RESIDENTIAL_ADDRESS_CITY: 'enrollee.residential_address.city',
    ENROLLEE_RESIDENTIAL_ADDRESS_STATE: 'enrollee.residential_address.state',
    ENROLLEE_RESIDENTIAL_ADDRESS_ZIPCODE: 'enrollee.residential_address.zipcode',
    ENROLLEE_CHANGE_TYPE: 'enrollee.change_type',
    ENROLLEE_CHANGE_EFFECTIVE_DATE: 'enrollee.change_effective_date',
    ENROLLEE_ADDITIONAL_MAINTENANCE_REASON: 'enrollee.additional_maintenance_reason',
  };

  const VALIDATION_RULES = {
    [FIELDS.BROKER_FIRST_NAME]: { maxLength: 50 },
    [FIELDS.BROKER_MIDDLE_NAME]: { maxLength: 50 },
    [FIELDS.BROKER_LAST_NAME]: { maxLength: 50 },
    [FIELDS.BROKER_PREFIX]: { maxLength: 4 },
    [FIELDS.BROKER_SUFFIX]: { maxLength: 4 },
    [FIELDS.BROKER_PHONE_NUMBER]: { maxLength: 10 },
    [FIELDS.BROKER_EMAIL]: { maxLength: 50 },
    [FIELDS.BROKER_NPN]: { maxLength: 10 },
    [FIELDS.SERVICING_AGENT_FIRST_NAME]: { maxLength: 50 },
    [FIELDS.SERVICING_AGENT_MIDDLE_NAME]: { maxLength: 50 },
    [FIELDS.SERVICING_AGENT_LAST_NAME]: { maxLength: 50 },
    [FIELDS.SERVICING_AGENT_PREFIX]: { maxLength: 4 },
    [FIELDS.SERVICING_AGENT_SUFFIX]: { maxLength: 4 },
    [FIELDS.SERVICING_AGENT_PHONE_NUMBER]: { maxLength: 10 },
    [FIELDS.SERVICING_AGENT_EMAIL]: { maxLength: 50 },
    [FIELDS.SERVICING_AGENT_NPN]: { maxLength: 10 },
    [FIELDS.PLAN_YEAR]: { required: true, maxLength: 4 },
    [FIELDS.PLAN_HIOS_ID]: {
      required: true,
      regex: /^\d{5}[A-Za-z]{2}\d{7}-\d{2}$/
    },
    [FIELDS.PLAN_MONTHLY_PREMIUM]: {
      required: true,
      isNumberOrFloat: true,
    },
    [FIELDS.PAYMENT_ROUTING_NUMBER]: {
      allNoneOrAllNotNone: [
        FIELDS.PAYMENT_ROUTING_NUMBER,
        FIELDS.PAYMENT_ACCOUNT_NUMBER,
        FIELDS.PAYMENT_PAYER_NAME,
        FIELDS.PAYMENT_ACCOUNT_TYPE,
        FIELDS.PAYMENT_IS_NEW_PAYMENT_INSTRUMENT,
      ],
    },
    [FIELDS.ENROLLMENT_RENEWAL_TYPE]: { enum: ['PASSIVE', 'ACTIVE'] },
    [FIELDS.ENROLLMENT_EXTERNAL_POLICY_ID]: { required: true },
    [FIELDS.ENROLLMENT_DATE_SIGNED]: { required: true },
    [FIELDS.ENROLLMENT_QUALIFYING_EVENT]: {
      required: (row) => !['CANCELLATION', 'TERMINATION'].includes(row[FIELDS.ENROLLEE_CHANGE_TYPE]),
      enum: [
        'ACTIVE_MILITARY_DUTY', 'ADOPTION', 'BECOMING_LAWFULLY_PRESENT', 'BIRTH', 'C1', 'COFR',
        'COURT_ORDERED_CHILD_COVERAGE', 'COVID_19', 'DEATH_OF_CHILD', 'DOMESTIC_VIOLENCE', 'E1',
        'EMPLOYER_INSURANCE_NO_LONGER_AFFORDABLE', 'EMPLOYER_INSURANCE_NO_LONGER_MEC',
        'EMPLOYER_OPEN_ENROLLMENT', 'EX', 'FOSTER_CHILD', 'GAIN_A_DEPENDENT_THROUGH_COURT_ORDER',
        'GAIN_A_DEPENDENT_THROUGH_MARRIAGE', 'GAIN_STATUS_AS_INDIAN', 'HRAS', 'L1', 'L2', 'L3',
        'L5', 'L6', 'L7', 'M1', 'M2', 'NATURAL_DISASTER', 'NO_LONGER_ELIGIBLE_FOR_MEDICAID',
        'NO_LONGER_ELIGIBLE_FOR_MEDI_CAL', 'PARTNER_CHANGES_EMPLOYMENT', 'PARTNER_DROPS_COVERAGE',
        'PREGNANCY', 'PROV_NO_LONGER_COVERED', 'RELEASE_FROM_INCARCERATION', 'S1', 'SEPARATION',
        'SPOUSE_DEATH', 'STUDENT_HEALTH_COVERAGE', 'PERM_MOVE', 'PREGNANCY_COVERAGE',
        'MEDICARE_ENTITLEMENT', 'LOSS_OF_COVERAGE', 'GAIN_DEPENDENT', 'DEATH'
      ],
    },
    [FIELDS.ENROLLMENT_QUALIFYING_EVENT_DATE]: {
      required: (row) => row[FIELDS.ENROLLMENT_QUALIFYING_EVENT] !== undefined && row[FIELDS.ENROLLMENT_QUALIFYING_EVENT].trim() !== '',
    },
    [FIELDS.ENROLLEE_EXTERNAL_MEMBER_ID]: { required: true },
    [FIELDS.ENROLLEE_FIRST_NAME]: { required: true },
    [FIELDS.ENROLLEE_LAST_NAME]: { required: true },
    [FIELDS.ENROLLEE_MARITAL_STATUS]: { enum: ['B', 'D', 'I', 'M', 'R', 'S', 'U', 'W', 'X'] },
    [FIELDS.ENROLLEE_SEX]: { required: true, enum: ['MALE', 'FEMALE'] },
    [FIELDS.ENROLLEE_DATE_OF_BIRTH]: { required: true },
    [FIELDS.ENROLLEE_IS_TOBACCO_USER]: { required: true },
    [FIELDS.ENROLLEE_RELATIONSHIP_TO_POLICY_HOLDER]: { required: true },
    [FIELDS.ENROLLEE_IS_REQUESTING_COVERAGE]: { required: true },
    [FIELDS.ENROLLEE_COVERAGE_START_DATE]: { required: true },
    [FIELDS.ENROLLEE_COVERAGE_END_DATE]: {
      required: (row) => ['CANCELLATION', 'TERMINATION'].includes(row[FIELDS.ENROLLEE_CHANGE_TYPE]),
      mustBeNullIf: (row) => !['CANCELLATION', 'TERMINATION'].includes(row[FIELDS.ENROLLEE_CHANGE_TYPE]),
    },
    [FIELDS.ENROLLEE_LANGUAGE_PREFERENCE]: { enum: ['eng', 'spa', 'ara', 'chi', 'fre', 'cpf', 'deu', 'guj', 'hin', 'kor', 'pol', 'por', 'rus', 'tgl', 'urd', 'vie'] },
    [FIELDS.ENROLLEE_RESIDENTIAL_ADDRESS_ADDRESS_LINE_1]: { required: true },
    [FIELDS.ENROLLEE_RESIDENTIAL_ADDRESS_CITY]: { required: true },
    [FIELDS.ENROLLEE_RESIDENTIAL_ADDRESS_STATE]: { required: true },
    [FIELDS.ENROLLEE_RESIDENTIAL_ADDRESS_ZIPCODE]: { required: true },
    [FIELDS.ENROLLEE_ETHNICITY]: { enum: ['2135-2', '1002-5', '2029-7', '2056-0', '2034-7', '2036-2', '2086-7', '2039-6', '2040-4', '2079-2', '2080-0', '2047-9', '2106-3', '2028-9', '2500-7', '2131-1', ''] },
    [FIELDS.ENROLLEE_CHANGE_TYPE]: { required: true, enum: ['CHANGE', 'ADDITION', 'CANCELLATION', 'TERMINATION', 'REINSTATEMENT'] },
    [FIELDS.ENROLLEE_CHANGE_EFFECTIVE_DATE]: {
      required: (row) => row[FIELDS.ENROLLEE_CHANGE_TYPE] === 'CHANGE',
    },
    };

    function validateField(fieldName, value, row) {
      const rules = VALIDATION_RULES[fieldName];
      const errors = [];

      if (rules?.required) {
        const isRequired = typeof rules.required === 'function' ? rules.required(row) : rules.required;
        if (isRequired && (!value || value.trim() === '')) {
          errors.push(`Missing or empty required field "${fieldName}"`);
        }
      }

      if (rules?.mustBeNullIf) {
        const mustBeNullCondition = typeof rules.mustBeNullIf === 'function' ? rules.mustBeNullIf(row) : rules.mustBeNullIf;
        if (mustBeNullCondition && value !== null && value !== undefined && value.trim() !== '') {
          errors.push(`Field "${fieldName}" must be null or empty due to condition.`);
        }
      }

      if (rules?.maxLength && value?.length > rules.maxLength) {
        errors.push(`Field "${fieldName}" exceeds character limit of ${rules.maxLength}. Value: "${value}"`);
      }

      if (rules?.enum && value !== "" && !rules.enum.includes(value)) {
        errors.push(`Field "${fieldName}" has an invalid value "${value}". Allowed values are: ${rules.enum.join(", ")}`);
      }

      if (rules?.isNumberOrFloat) {
        if (isNaN(parseFloat(value)) || !isFinite(parseFloat(value))) {
          errors.push(`Field "${fieldName}" has an invalid value "${value}". Expected a valid number or float.`);
        }
      }

      if (rules?.regex && !rules.regex.test(value)) {
        errors.push(`Field "${fieldName}" has an invalid format "${value}". Expected format: ${rules.regex}`);
      }

      if (rules?.allNoneOrAllNotNone) {
        const relatedFields = rules.allNoneOrAllNotNone;
        const allValues = relatedFields.map(field => row[field]);
        const allNone = allValues.every(val => val === null || val === undefined || val.trim() === '');
        const allNotNone = allValues.every(val => val !== null && val !== undefined && val.trim() !== '');
        if (!allNone && !allNotNone) {
        errors.push(`Fields ${relatedFields.join(", ")} must be either all None or all not None.`);
        }
      }

      if (rules?.eitherOrRequired) {
        const relatedFields = rules.eitherOrRequired;
        const hasAtLeastOneValue = relatedFields.some(field => row[field] !== null && row[field] !== undefined && row[field].trim() !== '');
        if (!hasAtLeastOneValue) {
          errors.push(`At least one of the fields ${relatedFields.join(", ")} is required.`);
        }
      }
      return errors;
    }

  function validateRow(row) {
    return Object.keys(row).flatMap(fieldName => validateField(fieldName, row[fieldName], row));
  }

  function validateCSV(content) {
    const errors = [];
    const parsed = Papa.parse(content, { header: true, skipEmptyLines: true });

    if (parsed.errors.length > 0) {
      errors.push(...parsed.errors.map(error => `Parsing error: ${error.message}`));
      return errors;
    }

    const rows = parsed.data;
    const headers = parsed.meta.fields;
    const missingHeaders = Object.values(FIELDS).filter(field => !headers.includes(field));

    if (missingHeaders.length > 0) {
      errors.push(`Missing headers: ${missingHeaders.join(", ")}`);
    }

    rows.forEach((row, index) => {
      const rowErrors = validateRow(row);
      if (rowErrors.length > 0) {
        errors.push(`Row ${index + 1}:<ul>${rowErrors.map(err => `<li>${err}</li>`).join("")}</ul>`);
      }
    });

    return errors;
  }

  document.getElementById("csvFileInput").addEventListener("change", function (event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        const errors = validateCSV(e.target.result);
        displayResults(errors);
      };
      reader.readAsText(file);
    }
  });

  document.getElementById("validateButton").addEventListener("click", function () {
    const content = document.getElementById("csvTextarea").value;
    const errors = validateCSV(content);
    displayResults(errors);
  });

  function displayResults(errors) {
    const outputDiv = document.getElementById("output");
    outputDiv.innerHTML = errors.length > 0
      ? `<strong>Validation Errors:</strong><ul>${errors.map(err => `<li>${err}</li>`).join("")}</ul>`
      : "<strong>CSV is valid!</strong>";
    outputDiv.style.borderColor = errors.length > 0 ? "red" : "green";
  }
</script>